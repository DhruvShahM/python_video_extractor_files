import tkinter as tk
from tkinter import filedialog
from pptx import Presentation
from pptx.util import Inches
import textwrap

class PPTCreatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("PowerPoint Generator")

        self.prs = Presentation()
        self.slides = []
        self.current_slide = -1  

        # Title Label
        tk.Label(root, text="‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§ü‡§æ‡§á‡§ü‡§≤:", font=("Arial", 12)).grid(row=0, column=0, padx=10, pady=5)
        self.title_entry = tk.Entry(root, width=40, font=("Arial", 12))
        self.title_entry.grid(row=0, column=1, padx=10, pady=5)

        # Type Selection
        tk.Label(root, text="‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:", font=("Arial", 12)).grid(row=1, column=0, padx=10, pady=5)
        self.slide_type = tk.StringVar(root)
        self.slide_type.set("text")
        tk.OptionMenu(root, self.slide_type, "text", "code").grid(row=1, column=1, padx=10, pady=5)

        # Content Box
        tk.Label(root, text="‡§Ö‡§™‡§®‡§æ ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§°‡§æ‡§≤‡•á‡§Ç:", font=("Arial", 12)).grid(row=2, column=0, padx=10, pady=5)
        self.content_text = tk.Text(root, width=60, height=10, font=("Arial", 12))
        self.content_text.grid(row=2, column=1, padx=10, pady=5)

        # Status Label
        self.status_label = tk.Label(root, text="", font=("Arial", 10), fg="green")
        self.status_label.grid(row=3, column=1, pady=5)

        # Navigation Buttons (Previous, Next)
        self.prev_button = tk.Button(root, text="‚¨ÖÔ∏è ‡§™‡§ø‡§õ‡§≤‡§æ", font=("Arial", 12), command=self.previous_slide, state=tk.DISABLED)
        self.prev_button.grid(row=4, column=0, pady=10)

        self.next_button = tk.Button(root, text="‚û°Ô∏è ‡§Ö‡§ó‡§≤‡§æ", font=("Arial", 12), command=self.next_slide, state=tk.DISABLED)
        self.next_button.grid(row=4, column=1, pady=10)

        # Add Slide Button
        tk.Button(root, text="‚ûï ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§ú‡•ã‡§°‡§º‡•á‡§Ç", font=("Arial", 12), command=self.add_slide).grid(row=5, column=0, pady=10)

        # Exit & Save Button
        tk.Button(root, text="üíæ PPT ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡•á‡§Ç", font=("Arial", 12), command=self.save_and_exit).grid(row=5, column=1, pady=10)

    def add_slide(self):
        """‡§®‡§Ø‡§æ ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§ú‡•ã‡§°‡§º‡•á‡§Ç"""
        title = self.title_entry.get().strip()
        content = self.content_text.get("1.0", tk.END).strip()
        slide_type = self.slide_type.get()

        if not title or not content:
            self.status_label.config(text="‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ü‡§æ‡§á‡§ü‡§≤ ‡§î‡§∞ ‡§ï‡§Ç‡§ü‡•á‡§Ç‡§ü ‡§≠‡§∞‡•á‡§Ç!", fg="red")
            return

        self.slides.append((title, content, slide_type))  

        if slide_type == "code":
            self.add_code_slide(title, content)
        else:
            self.add_text_slide(title, content)

        # GUI ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
        self.status_label.config(text="‚úÖ ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ó‡§à!", fg="green")

        # üî• ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§á‡§®‡§™‡•Å‡§ü ‡§´‡•Ä‡§≤‡•ç‡§° ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§ï‡§∞‡•á‡§Ç
        self.title_entry.delete(0, tk.END)
        self.content_text.delete("1.0", tk.END)

        # ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§π‡§Æ ‡§®‡§à ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§™‡§∞ ‡§Ü ‡§ó‡§è ‡§π‡•à‡§Ç
        self.current_slide = len(self.slides) - 1  

        # ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§¨‡§ü‡§® ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        if len(self.slides) > 1:
            self.next_button.config(state=tk.NORMAL)

    def add_text_slide(self, title, content):
        """‡§∏‡§ø‡§Ç‡§™‡§≤ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç"""
        slide_layout = self.prs.slide_layouts[1]
        slide = self.prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = title
        slide.shapes.placeholders[1].text = content

    def add_code_slide(self, title, code):
        """‡§ï‡•ã‡§° ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§ê‡§° ‡§ï‡§∞‡•á‡§Ç"""
        slide_layout = self.prs.slide_layouts[5]
        slide = self.prs.slides.add_slide(slide_layout)

        title_shape = slide.shapes.title
        title_shape.text = title

        textbox = slide.shapes.add_textbox(Inches(1), Inches(1.5), Inches(8.5), Inches(6))
        text_frame = textbox.text_frame
        text_frame.word_wrap = True

        wrapped_code = textwrap.fill(code, width=80)
        text_frame.text = wrapped_code

    def next_slide(self):
        """‡§Ö‡§ó‡§≤‡•Ä ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç"""
        if self.current_slide < len(self.slides) - 1:
            self.current_slide += 1
            self.show_slide()

    def previous_slide(self):
        """‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç"""
        if self.current_slide > 0:
            self.current_slide -= 1
            self.show_slide()

    def show_slide(self):
        """‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§∏‡•ç‡§≤‡§æ‡§á‡§° ‡§°‡•á‡§ü‡§æ GUI ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç"""
        if 0 <= self.current_slide < len(self.slides):
            title, content, slide_type = self.slides[self.current_slide]
            self.title_entry.delete(0, tk.END)
            self.title_entry.insert(0, title)

            self.slide_type.set(slide_type)

            self.content_text.delete("1.0", tk.END)
            self.content_text.insert("1.0", content)

        # ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§¨‡§ü‡§® ‡§è‡§®‡•á‡§¨‡§≤/‡§°‡§ø‡§∏‡•á‡§¨‡§≤ ‡§ï‡§∞‡•á‡§Ç
        if self.current_slide == 0:
            self.prev_button.config(state=tk.DISABLED)
        else:
            self.prev_button.config(state=tk.NORMAL)

        if self.current_slide == len(self.slides) - 1:
            self.next_button.config(state=tk.DISABLED)
        else:
            self.next_button.config(state=tk.NORMAL)

    def save_and_exit(self):
        """PPT ‡§ï‡•ã ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç"""
        save_path = filedialog.asksaveasfilename(defaultextension=".pptx",
                                                 filetypes=[("PowerPoint Files", "*.pptx")],
                                                 title="PPT ‡§ï‡•ã ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§•‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç")
        if save_path:
            self.prs.save(save_path)
            self.status_label.config(text=f"‚úÖ PPT ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§à: {save_path}", fg="blue")
            self.root.quit()

if __name__ == "__main__":
    root = tk.Tk()
    app = PPTCreatorApp(root)
    root.mainloop()
