[
    "`Generate a YouTube script in Hinglish on {\"title\": \"Golang Data Types - Introduction\", \"content\": \"Golang एक statically typed भाषा है, जिसमें हर वेरिएबल को एक निश्चित डेटा टाइप से परिभाषित किया जाता है। डेटा टाइप यह निर्धारित करता है कि कोई वेरिएबल किस तरह का डेटा स्टोर कर सकता है। Golang के डेटा टाइप्स को मुख्यतः दो भागों में बांटा जाता है: Primitive (मूलभूत) और Derived (व्युत्पन्न)। Primitive डेटा टाइप्स में int, float, bool, और string आते हैं, जबकि Derived डेटा टाइप्स में Array, Slice, Map, Struct, और Interface शामिल हैं। Golang में डेटा टाइप्स की स्पष्टता इसे high-performance और memory-efficient बनाती है।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Basic Data Types in Golang\", \"content\": [{\"Type\": \"int\", \"Description\": \"पूर्णांक (Integer)\"}, {\"Type\": \"float64\", \"Description\": \"दशमलव संख्या (Floating Point)\"}, {\"Type\": \"bool\", \"Description\": \"सत्य या असत्य (Boolean)\"}, {\"Type\": \"string\", \"Description\": \"Text डेटा (String)\"}, {\"Type\": \"complex64\", \"Description\": \"Complex numbers\"}, {\"Type\": \"byte\", \"Description\": \"uint8 का alias, ASCII characters के लिए\"}, {\"Type\": \"rune\", \"Description\": \"int32 का alias, Unicode characters के लिए\"}]}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Integer Data Types\", \"content\": [{\"Type\": \"int8\", \"Size (Bits)\": \"8-bit\", \"Range\": \"-128 से 127\"}, {\"Type\": \"int16\", \"Size (Bits)\": \"16-bit\", \"Range\": \"-32,768 से 32,767\"}, {\"Type\": \"int32\", \"Size (Bits)\": \"32-bit\", \"Range\": \"-2,147,483,648 से 2,147,483,647\"}, {\"Type\": \"int64\", \"Size (Bits)\": \"64-bit\", \"Range\": \"-9,223,372,036,854,775,808 से 9,223,372,036,854,775,807\"}]}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Type Aliases in Golang\", \"content\": \"Golang में हम **existing डेटा टाइप्स के लिए नए नाम** बना सकते हैं, जिससे कोड ज्यादा readable और maintainable बनता है। Type aliases का उपयोग विशेष रूप से तब किया जाता है जब हम कोड को अधिक सार्थक और डोमेन-विशिष्ट बनाना चाहते हैं। उदाहरण के लिए, यदि हमारे प्रोजेक्ट में `Age` और `Salary` दोनों `int` प्रकार के हैं, तो हम `type Age int` और `type Salary int` बनाकर कोड को और अधिक स्पष्ट बना सकते हैं। इससे डेटा मैनिपुलेशन और डिबगिंग आसान हो जाती है।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Custom Data Types - Struct\", \"content\": \"Struct (संरचना) का उपयोग कस्टम डेटा टाइप बनाने के लिए किया जाता है। यह विभिन्न डेटा फील्ड्स को encapsulate करने में मदद करता है। Struct का उपयोग तब किया जाता है जब हमें एक ही entity के कई गुणों को एक साथ रखने की आवश्यकता होती है। उदाहरण के लिए, एक `Person` स्ट्रक्चर में `Name`, `Age` और `Address` जैसी फील्ड्स हो सकती हैं। Struct का उपयोग करके हम डेटा को अधिक संगठित और reusable बना सकते हैं। Golang में Struct का कोई method नहीं होता, लेकिन हम methods को struct के साथ associate कर सकते हैं, जिससे object-oriented programming का एक रूप प्राप्त होता है।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Interfaces in Golang\", \"content\": \"Interfaces का उपयोग Polymorphism को सपोर्ट करने के लिए किया जाता है। यह विभिन्न टाइप्स के लिए एक कॉमन behavior define करता है। Golang की interfaces अन्य भाषाओं की तुलना में भिन्न होती हैं क्योंकि वे implicit रूप से implement होती हैं। इसका मतलब है कि किसी टाइप को explicitly किसी interface को implement करने की आवश्यकता नहीं होती, बल्कि यदि टाइप में आवश्यक methods मौजूद हैं, तो वह अपने आप interface को implement कर लेता है। इससे कोड अधिक flexible और loosely coupled बनता है, जो large-scale applications में बहुत उपयोगी होता है।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Nil Value in Golang\", \"content\": \"Nil वैल्यू उन टाइप्स के लिए उपयोग होती है जो reference-based होते हैं, जैसे pointers, slices, maps, channels, interfaces और functions। जब किसी reference टाइप की वैल्यू nil होती है, तो इसका मतलब है कि वह किसी भी मेमोरी लोकेशन को पॉइंट नहीं कर रही है। यह एक महत्वपूर्ण सुरक्षा तंत्र है जो runtime errors को रोकने में मदद करता है। Nil का सही उपयोग प्रोग्राम की स्थिरता और विश्वसनीयता को बढ़ाता है। हालांकि, nil dereference करने से `runtime panic` हो सकता है, इसलिए इसका उपयोग करते समय उचित चेक करना आवश्यक है।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Memory Optimization with Pointers\", \"content\": \"Pointers का उपयोग memory optimization और references पास करने के लिए किया जाता है। जब हम किसी बड़े डेटा स्ट्रक्चर (जैसे कि Structs या Arrays) को एक फंक्शन में पास करते हैं, तो उसे कॉपी करने के बजाय pointer के माध्यम से refer करना ज्यादा efficient होता है। इससे memory usage कम होती है और execution speed बढ़ती है। Golang में `&` ऑपरेटर का उपयोग किसी वेरिएबल का एड्रेस प्राप्त करने के लिए किया जाता है, और `*` ऑपरेटर का उपयोग उस एड्रेस पर मौजूद डेटा को एक्सेस करने के लिए किया जाता है। Pointers का सही उपयोग memory management को बेहतर बनाता है और performance को optimize करता है।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Iota - Auto-increment Constants\", \"content\": \"Golang में `iota` का उपयोग कई constants को auto-increment तरीके से असाइन करने के लिए किया जाता है। `iota` एक विशेष रूप से परिभाषित constant generator है, जो प्रत्येक नए `const` ब्लॉक के लिए 0 से शुरू होता है और प्रत्येक नई लाइन पर स्वतः 1 से बढ़ जाता है। यह enumeration को आसान और readable बनाता है। इसका उपयोग flags, enumerations, और bitwise operations में व्यापक रूप से किया जाता है। इससे हम multiple constants को आसानी से परिभाषित कर सकते हैं, बिना प्रत्येक के लिए मैन्युअली मान असाइन करने की आवश्यकता।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Type Conversion in Golang\", \"content\": \"Golang में implicit type conversion नहीं होता, हमें manually type conversion करना पड़ता है। इसका कारण यह है कि Golang type safety को प्राथमिकता देता है ताकि unintended data loss या runtime errors को रोका जा सके। जब हमें एक डेटा टाइप को दूसरे में बदलना होता है, तो हमें explicit conversion लिखनी पड़ती है, जैसे `float64(intVar)`। Type conversion विशेष रूप से तब आवश्यक होता है जब हम विभिन्न प्रकार के डेटा के साथ काम कर रहे होते हैं, जैसे कि user input (string) को integer या float में बदलना। हालांकि, Type conversion के दौरान overflow या precision loss हो सकता है, इसलिए इसका ध्यान रखना आवश्यक होता है।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Type Inference in Golang\", \"content\": \"Golang में **type inference** का उपयोग होता है, जिससे डेटा टाइप specify करने की ज़रूरत नहीं होती। जब हम `:=` ऑपरेटर का उपयोग करते हैं, तो compiler स्वचालित रूप से वैल्यू के आधार पर डेटा टाइप निर्धारित कर लेता है। इससे कोड अधिक concise और readable बनता है। उदाहरण के लिए, `num := 100` अपने आप `int` को infer करेगा, और `pi := 3.14` को `float64` माना जाएगा। हालांकि, यह ध्यान रखना आवश्यक है कि Type inference का उपयोग केवल local variable declaration के लिए किया जा सकता है, न कि global variables के लिए।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Derived Data Types in Golang\", \"content\": [{\"Type\": \"Array\", \"Description\": \"एक निश्चित साइज़ का डेटा कलेक्शन\"}, {\"Type\": \"Slice\", \"Description\": \"डायनामिक साइज़ का डेटा कलेक्शन\"}, {\"Type\": \"Map\", \"Description\": \"Key-Value स्टोरेज\"}, {\"Type\": \"Struct\", \"Description\": \"कस्टम डेटा टाइप बनाने के लिए\"}, {\"Type\": \"Interface\", \"Description\": \"Behavior define करने के लिए\"}]}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations",
    "`Generate a YouTube script in Hinglish on {\"title\": \"Conclusion\", \"content\": \"Golang में डेटा टाइप structured और efficient होते हैं। सही डेटा टाइप का चयन करना परफॉर्मेंस और मेमोरी optimization के लिए बहुत ज़रूरी होता है। Strong typing के कारण Golang में संभावित runtime errors को compile-time पर ही पकड़ लिया जाता है, जिससे कोड अधिक सुरक्षित और विश्वसनीय बनता है। Type inference और Type conversion जैसी सुविधाएँ इसे अधिक readable और maintainable बनाती हैं। Golang में Structs, Interfaces, और Pointers जैसी उन्नत सुविधाएँ भी उपलब्ध हैं, जो इसे एक शक्तिशाली भाषा बनाती हैं।\"}, The script should jump straight into the main content without an intro or conclusion. Keep it engaging, conversational, and provide clear explanations with examples where needed. Use a mix of Hindi and English to keep it natural and easy to follow.Don't include any code in the script—just explanations"
]